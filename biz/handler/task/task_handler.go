// Code generated by hertz generator.

package task

import (
	"context"
	taskService "nodolist/biz/service/task"
	"nodolist/pkg/errno"
	"nodolist/pkg/pack"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	task "nodolist/biz/model/task"
)

// CreateTask .
// @Summary create_task
// @Description create a task
// @Accept json/form
// @Produce json
// @Param title query string true "标题"
// @Param content query string true "内容"
// @Param Authorization header string true "Format: Bearer {token}"
// @router /nodolist/task/create [POST]
func CreateTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.CreateTaskReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task.CreateTaskResp)

	v, _ := c.Get("current_user_id")
	id, _ := v.(int64)

	taskResp, err := taskService.NewTaskService(ctx).CreateTask(&req, id)
	if err != nil {
		resp.Base = pack.BuildBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Task = taskService.BuildTaskResp(taskResp)
	resp.Base = pack.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// ChangeTaskStatus .
// @Summary change_task_status
// @Description change task's status
// @Accept json/form
// @Produce json
// @Param id query int true "task_id"
// @Param status query int true "状态 0:标记为未完成;1:标记为完成"
// @Param Authorization header string true "Format: Bearer {token}"
// @router /nodolist/task/status [GET]
func ChangeTaskStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.ChangeTaskStatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task.ChangeTaskStatusResp)

	if req.Status != 1 && req.Status != 0 {
		resp.Base = pack.BuildBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}

	v, _ := c.Get("current_user_id")
	id, _ := v.(int64)

	err = taskService.NewTaskService(ctx).ChangeTaskStatus(&req, id)

	resp.Base = pack.BuildBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// ShowNotDoTask .
// @Summary show_doing_tasks
// @Description show doing tasks
// @Accept json/form
// @Produce json
// @Param page_num query int true "页码"
// @Param Authorization header string true "Format: Bearer {token}"
// @router /nodolist/tasks/doing [GET]
func ShowNotDoTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.ShowNotDoTaskReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task.ShowNotDoTaskResp)

	v, _ := c.Get("current_user_id")
	id, _ := v.(int64)

	tasksResp, count, err := taskService.NewTaskService(ctx).ShowDoingTasks(&req, id)
	if err != nil {
		resp.Base = pack.BuildBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.TaskCount = &count
	resp.Tasks = taskService.BuildTasksResp(tasksResp)
	resp.Base = pack.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// ShowDoneTask .
// @Summary show_done_tasks
// @Description show done tasks
// @Accept json/form
// @Produce json
// @Param page_num query int true "页码"
// @Param Authorization header string true "Format: Bearer {token}"
// @router /nodolist/tasks/done [GET]
func ShowDoneTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.ShowDoneTaskReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task.ShowDoneTaskResp)

	v, _ := c.Get("current_user_id")
	id, _ := v.(int64)

	tasksResp, count, err := taskService.NewTaskService(ctx).ShowDoneTasks(&req, id)
	if err != nil {
		resp.Base = pack.BuildBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.TaskCount = &count
	resp.Tasks = taskService.BuildTasksResp(tasksResp)
	resp.Base = pack.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}
